#include <iostream>
#include "stdio.h"

using namespace std;


struct list {
	int el = NULL;
	list* next = NULL;
};


int min(list* t, int *minimum, int total) {
	if (total == 0)
		return 0;
	if (*minimum > t->el) {
		*minimum = t->el;
	}
	return min(t->next, minimum, total-1);
}

list* del(list*& t, int x, int total) {
	int count = 0;
	while (count != total) {
		if (t->el == x) {
			for (int i = 1; i < total - count; i++) {
				t->el = t->next->el;
				t = t->next;
			}
			t->el = x;
			t = t->next;
			return t;
		}
		count += 1;
		t = t->next;
	}
}


void vivod(list* t, int total) {
	while (total != 0) {
		cout << t->el << ' ';
		t = t->next;
		total -= 1;
	}
}




int main()
{
	char h = '0';
	int total = 0;
	int a;
	list* headlist, * end;
	end = headlist = new list;
	FILE* fp;
	fopen_s(&fp, "D:\input.txt", "r");
	if (fp == NULL)
		cout << "Error";
	else {
		while (!feof(fp)) {
			fscanf_s(fp, "%d", &a);
			end->next = new list;
			end = end->next;
			end->el = a;
			total += 1;
			fscanf_s(fp, "%c", &h, 1);
		}
	}
	end->next = headlist->next;
	fclose(fp);
	int minimum = 999;
	min(headlist->next, &minimum, total);
	del(headlist->next, minimum, total);
	vivod(headlist->next, total);
	

}
//1.	В текстовом файле дана последовательность чисел. Написать подпрограмму, которая находит в односвязнном циклическом списке минимальный элемент. 
//Используя эту подпрограмму, в заданной последовательности все элементы с минимальным значением переместить в конец последовательности. 